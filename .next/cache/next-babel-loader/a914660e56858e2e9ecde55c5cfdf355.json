{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"X:\\\\Victor\\\\Documents\\\\dev\\\\web\\\\rick-and-morty-wiki\\\\src\\\\containers\\\\CharacterList\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Box, Heading, SimpleGrid, Text } from '@chakra-ui/core';\nimport CharacterItem from '../../components/common/CharacterItem';\nimport Loader from '../../components/common/Loader';\nimport Filter from '../../components/layout/Filter';\nimport Pagination from '../../components/layout/Pagination';\nimport { GET_CHARACTER_LIST } from '../../lib/queries';\nimport { Error, Container } from './styles';\n\nconst CharacterList = () => {\n  const INITIAL_FILTER = {\n    name: null,\n    status: null,\n    species: null,\n    type: null,\n    gender: null\n  };\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(_objectSpread({}, INITIAL_FILTER));\n  const {\n    loading,\n    error,\n    data,\n    fetchMore\n  } = useQuery(GET_CHARACTER_LIST(gql), {\n    variables: {\n      page: 1,\n      filter\n    },\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-first'\n  });\n  const characterData = data ? data['characters']['results'] : [];\n  const {\n    pages,\n    next,\n    prev,\n    count\n  } = data ? data['characters']['info'] : {};\n\n  const onPrev = () => paginate(data, fetchMore, prev);\n\n  const onNext = () => paginate(data, fetchMore, next);\n\n  const renderContent = () => {\n    if (loading || !data) return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n    if (error) return __jsx(Error, {\n      error: error,\n      message: \"Could not fetch Rick and Morty characters...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n    return __jsx(React.Fragment, null, __jsx(Filter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), __jsx(Pagination, {\n      prev: prev,\n      next: next,\n      onPrev: onPrev,\n      onNext: onNext,\n      pages: pages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), __jsx(Text, {\n      textAlign: \"center\",\n      color: \"gray.400\",\n      marginBottom: \"20px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"\\u2022 \", count, \" characters \\u2022\"), __jsx(Text, {\n      textAlign: \"center\",\n      color: \"gray.400\",\n      marginBottom: \"20px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Showind \", characterData.length), __jsx(SimpleGrid, {\n      columns: {\n        md: 5,\n        sm: 3,\n        xs: 1\n      },\n      spacingX: \"30px\",\n      spacingY: \"30px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, characterData.length === 0 ? __jsx(Error, {\n      message: \"This search led to no results...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }) : characterData.map(character => __jsx(CharacterItem, _extends({\n      key: character.id\n    }, character, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })))), __jsx(Pagination, {\n      prev: prev,\n      next: next,\n      onPrev: onPrev,\n      onNext: onNext,\n      pages: pages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  };\n\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(Heading, {\n    as: \"h1\",\n    size: \"xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Rick and Morty Characters:\"), renderContent());\n};\n\nconst paginate = (data, fetchMore, page) => fetchMore({\n  variables: {\n    page\n  },\n  updateQuery: (previousResult, {\n    fetchMoreResult\n  }) => {\n    if (!fetchMoreResult) return previousResult;\n    return fetchMoreResult;\n  }\n});\n\nexport default CharacterList;","map":{"version":3,"sources":["X:/Victor/Documents/dev/web/rick-and-morty-wiki/src/containers/CharacterList/index.js"],"names":["React","useState","useQuery","gql","Box","Heading","SimpleGrid","Text","CharacterItem","Loader","Filter","Pagination","GET_CHARACTER_LIST","Error","Container","CharacterList","INITIAL_FILTER","name","status","species","type","gender","filter","setFilter","loading","error","data","fetchMore","variables","page","notifyOnNetworkStatusChange","fetchPolicy","characterData","pages","next","prev","count","onPrev","paginate","onNext","renderContent","length","md","sm","xs","map","character","id","updateQuery","previousResult","fetchMoreResult"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport { Box, Heading, SimpleGrid, Text } from '@chakra-ui/core';\r\nimport CharacterItem from '../../components/common/CharacterItem';\r\nimport Loader from '../../components/common/Loader';\r\nimport Filter from '../../components/layout/Filter';\r\nimport Pagination from '../../components/layout/Pagination';\r\nimport { GET_CHARACTER_LIST } from '../../lib/queries';\r\nimport { Error, Container } from './styles';\r\n\r\nconst CharacterList = () => {\r\n  const INITIAL_FILTER = {\r\n    name: null,\r\n    status: null,\r\n    species: null,\r\n    type: null,\r\n    gender: null\r\n  };\r\n\r\n  const [filter, setFilter] = useState({ ...INITIAL_FILTER });\r\n\r\n  const { loading, error, data, fetchMore } = useQuery(GET_CHARACTER_LIST(gql), {\r\n    variables: { page: 1, filter },\r\n    notifyOnNetworkStatusChange: true,\r\n    fetchPolicy: 'cache-first'\r\n  });\r\n\r\n  const characterData = data ? data['characters']['results'] : [];\r\n  const { pages, next, prev, count } = data ? data['characters']['info'] : {};\r\n\r\n  const onPrev = () => paginate(data, fetchMore, prev);\r\n  const onNext = () => paginate(data, fetchMore, next);\r\n\r\n  const renderContent = () => {\r\n    if (loading || !data) return <Loader />;\r\n\r\n    if (error)\r\n      return <Error error={error} message=\"Could not fetch Rick and Morty characters...\" />;\r\n\r\n    return (\r\n      <>\r\n        <Filter />\r\n        <Pagination prev={prev} next={next} onPrev={onPrev} onNext={onNext} pages={pages} />\r\n\r\n        <Text textAlign=\"center\" color=\"gray.400\" marginBottom=\"20px\">\r\n          &bull; {count} characters &bull;\r\n        </Text>\r\n\r\n        <Text textAlign=\"center\" color=\"gray.400\" marginBottom=\"20px\">\r\n          Showind {characterData.length}\r\n        </Text>\r\n        <SimpleGrid columns={{ md: 5, sm: 3, xs: 1 }} spacingX=\"30px\" spacingY=\"30px\">\r\n          {characterData.length === 0 ? (\r\n            <Error message=\"This search led to no results...\" />\r\n          ) : (\r\n            characterData.map(character => <CharacterItem key={character.id} {...character} />)\r\n          )}\r\n        </SimpleGrid>\r\n\r\n        <Pagination prev={prev} next={next} onPrev={onPrev} onNext={onNext} pages={pages} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Heading as=\"h1\" size=\"xl\">\r\n        Rick and Morty Characters:\r\n      </Heading>\r\n\r\n      {renderContent()}\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst paginate = (data, fetchMore, page) =>\r\n  fetchMore({\r\n    variables: {\r\n      page\r\n    },\r\n    updateQuery: (previousResult, { fetchMoreResult }) => {\r\n      if (!fetchMoreResult) return previousResult;\r\n\r\n      return fetchMoreResult;\r\n    }\r\n  });\r\n\r\nexport default CharacterList;\r\n"]},"metadata":{},"sourceType":"module"}