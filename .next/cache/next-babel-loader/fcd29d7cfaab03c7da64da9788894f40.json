{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"X:\\\\Victor\\\\Documents\\\\dev\\\\web\\\\rick-and-morty-wiki\\\\src\\\\containers\\\\CharacterDetails\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useRouter } from 'next/router';\nimport { gql } from 'apollo-boost';\nimport { Box, Heading, SimpleGrid, Text } from '@chakra-ui/core';\nimport { GET_CHARACTER_DETAILS } from '../../lib/queries';\nimport Loader from '../../components/common/Loader';\nimport { Error } from '../CharacterList/styles';\n\nconst CharacterDetails = () => {\n  const router = useRouter();\n  const {\n    pid\n  } = router.query;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_CHARACTER_DETAILS(gql), {\n    variables: {\n      id: pid\n    },\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-first'\n  });\n  if (loading) return __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  });\n  if (error) return __jsx(Error, {\n    error: \"error\",\n    message: \"Erro fetching character data...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  });\n  return __jsx(Box, {\n    p: {\n      md: '200px',\n      sm: '20px',\n      xs: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n  return __jsx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, _JSON$stringify(data, null, 2));\n};\n\nexport default CharacterDetails;","map":{"version":3,"sources":["X:/Victor/Documents/dev/web/rick-and-morty-wiki/src/containers/CharacterDetails/index.js"],"names":["React","useState","useQuery","useRouter","gql","Box","Heading","SimpleGrid","Text","GET_CHARACTER_DETAILS","Loader","Error","CharacterDetails","router","pid","query","loading","error","data","variables","id","notifyOnNetworkStatusChange","fetchPolicy","md","sm","xs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,UAAvB,EAAmCC,IAAnC,QAA+C,iBAA/C;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,KAAT,QAAsB,yBAAtB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AAEA,QAAM;AAAEW,IAAAA;AAAF,MAAUD,MAAM,CAACE,KAAvB;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BhB,QAAQ,CAACO,qBAAqB,CAACL,GAAD,CAAtB,EAA6B;AACpEe,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEN;AAAN,KADyD;AAEpEO,IAAAA,2BAA2B,EAAE,IAFuC;AAGpEC,IAAAA,WAAW,EAAE;AAHuD,GAA7B,CAAzC;AAMA,MAAIN,OAAJ,EAAa,OAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,OAAb;AAAqB,IAAA,OAAO,EAAC,iCAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,SAAO,MAAC,GAAD;AAAK,IAAA,CAAC,EAAE;AAAEM,MAAAA,EAAE,EAAE,OAAN;AAAeC,MAAAA,EAAE,EAAE,MAAnB;AAA2BC,MAAAA,EAAE,EAAE;AAA/B,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,gBAAeP,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAN,CAAP;AACD,CAjBD;;AAmBA,eAAeN,gBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { useRouter } from 'next/router';\r\nimport { gql } from 'apollo-boost';\r\nimport { Box, Heading, SimpleGrid, Text } from '@chakra-ui/core';\r\nimport { GET_CHARACTER_DETAILS } from '../../lib/queries';\r\nimport Loader from '../../components/common/Loader';\r\nimport { Error } from '../CharacterList/styles';\r\n\r\nconst CharacterDetails = () => {\r\n  const router = useRouter();\r\n\r\n  const { pid } = router.query;\r\n\r\n  const { loading, error, data } = useQuery(GET_CHARACTER_DETAILS(gql), {\r\n    variables: { id: pid },\r\n    notifyOnNetworkStatusChange: true,\r\n    fetchPolicy: 'cache-first'\r\n  });\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <Error error=\"error\" message=\"Erro fetching character data...\" />;\r\n\r\n  return <Box p={{ md: '200px', sm: '20px', xs: '20px' }}></Box>;\r\n\r\n  return <pre>{JSON.stringify(data, null, 2)}</pre>;\r\n};\r\n\r\nexport default CharacterDetails;\r\n"]},"metadata":{},"sourceType":"module"}