{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"X:\\\\Victor\\\\Documents\\\\dev\\\\web\\\\rick-and-morty-wiki\\\\src\\\\containers\\\\CharacterList\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Box, Heading, Stack, Flex, SimpleGrid, Button } from '@chakra-ui/core';\nimport CharacterItem from '../../components/common/CharacterItem';\nimport Loader from '../../components/common/Loader';\nimport Filter from '../../components/layout/Filter';\nimport Pagination from '../../components/layout/Pagination';\nimport { GET_CHARACTER_LIST } from '../../lib/queries';\nimport { Error, Container } from './styles';\n\nconst CharacterList = () => {\n  const INITIAL_FILTER = {\n    name: null,\n    status: null,\n    species: null,\n    type: null,\n    gender: null\n  };\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(_objectSpread({}, INITIAL_FILTER));\n  const {\n    loading,\n    error,\n    data,\n    fetchMore\n  } = useQuery(GET_CHARACTER_LIST(gql), {\n    variables: {\n      page: 0,\n      filter\n    },\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-first'\n  });\n  if (loading) return __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  });\n  const characterData = data ? data['characters']['results'] : [];\n  const {\n    pages,\n    next,\n    prev\n  } = data['characters']['info'];\n\n  const onPrev = () => paginate(data, fetchMore, prev);\n\n  const onNext = () => paginate(data, fetchMore, next);\n\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(Heading, {\n    as: \"h1\",\n    size: \"2xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Rick and Morty Characters:\"), error ? __jsx(Error, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }) : __jsx(React.Fragment, null, __jsx(Filter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(Pagination, {\n    prev: prev,\n    next: next,\n    onPrev: onPrev,\n    onNext: onNext,\n    pages: pages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(SimpleGrid, {\n    columns: {\n      md: 5,\n      sm: 3,\n      xs: 1\n    },\n    spacingX: \"30px\",\n    spacingY: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, characterData.map(character => __jsx(CharacterItem, _extends({\n    key: character.id\n  }, character, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })))), __jsx(Pagination, {\n    prev: prev,\n    next: next,\n    onPrev: onPrev,\n    onNext: onNext,\n    pages: pages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })));\n};\n\nconst paginate = (data, fetchMore, page) => fetchMore({\n  variables: {\n    page\n  },\n  updateQuery: (previousResult, {\n    fetchMoreResult\n  }) => {\n    if (!fetchMoreResult) return previousResult;\n    return fetchMoreResult;\n  }\n});\n\nexport default CharacterList;","map":{"version":3,"sources":["X:/Victor/Documents/dev/web/rick-and-morty-wiki/src/containers/CharacterList/index.js"],"names":["React","useState","useQuery","gql","Box","Heading","Stack","Flex","SimpleGrid","Button","CharacterItem","Loader","Filter","Pagination","GET_CHARACTER_LIST","Error","Container","CharacterList","INITIAL_FILTER","name","status","species","type","gender","filter","setFilter","loading","error","data","fetchMore","variables","page","notifyOnNetworkStatusChange","fetchPolicy","characterData","pages","next","prev","onPrev","paginate","onNext","md","sm","xs","map","character","id","updateQuery","previousResult","fetchMoreResult"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport { Box, Heading, Stack, Flex, SimpleGrid, Button } from '@chakra-ui/core';\r\nimport CharacterItem from '../../components/common/CharacterItem';\r\nimport Loader from '../../components/common/Loader';\r\nimport Filter from '../../components/layout/Filter';\r\nimport Pagination from '../../components/layout/Pagination';\r\nimport { GET_CHARACTER_LIST } from '../../lib/queries';\r\nimport { Error, Container } from './styles';\r\n\r\nconst CharacterList = () => {\r\n  const INITIAL_FILTER = {\r\n    name: null,\r\n    status: null,\r\n    species: null,\r\n    type: null,\r\n    gender: null\r\n  };\r\n\r\n  const [filter, setFilter] = useState({ ...INITIAL_FILTER });\r\n\r\n  const { loading, error, data, fetchMore } = useQuery(GET_CHARACTER_LIST(gql), {\r\n    variables: { page: 0, filter },\r\n    notifyOnNetworkStatusChange: true,\r\n    fetchPolicy: 'cache-first'\r\n  });\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  const characterData = data ? data['characters']['results'] : [];\r\n  const { pages, next, prev } = data['characters']['info'];\r\n\r\n  const onPrev = () => paginate(data, fetchMore, prev);\r\n  const onNext = () => paginate(data, fetchMore, next);\r\n\r\n  return (\r\n    <Container>\r\n      <Heading as=\"h1\" size=\"2xl\">\r\n        Rick and Morty Characters:\r\n      </Heading>\r\n\r\n      {error ? (\r\n        <Error error={error} />\r\n      ) : (\r\n        <>\r\n          <Filter />\r\n          <Pagination prev={prev} next={next} onPrev={onPrev} onNext={onNext} pages={pages} />\r\n\r\n          <SimpleGrid columns={{ md: 5, sm: 3, xs: 1 }} spacingX=\"30px\" spacingY=\"30px\">\r\n            {characterData.map(character => (\r\n              <CharacterItem key={character.id} {...character} />\r\n            ))}\r\n          </SimpleGrid>\r\n\r\n          <Pagination prev={prev} next={next} onPrev={onPrev} onNext={onNext} pages={pages} />\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst paginate = (data, fetchMore, page) =>\r\n  fetchMore({\r\n    variables: {\r\n      page\r\n    },\r\n    updateQuery: (previousResult, { fetchMoreResult }) => {\r\n      if (!fetchMoreResult) return previousResult;\r\n\r\n      return fetchMoreResult;\r\n    }\r\n  });\r\n\r\nexport default CharacterList;\r\n"]},"metadata":{},"sourceType":"module"}